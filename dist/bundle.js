(()=>{"use strict";var e={64:(e,t,n)=>{n.d(t,{Z:()=>l});var a=n(15),r=n.n(a),o=n(645),s=n.n(o)()(r());s.push([e.id,"@import url(https://fonts.googleapis.com/css2?family=Quicksand:wght@400;700&display=swap);"]),s.push([e.id,'body{font-family:"Quicksand",sans-serif}.form-wrapper{padding:20px;border:1px solid rgba(0,0,0,.1);border-radius:10px;margin-bottom:40px}.modal-wrapper{display:none}.table thead th{white-space:nowrap}.text-nowrap{white-space:nowrap}',"",{version:3,sources:["webpack://./src/sass/styles.sass"],names:[],mappings:"AAEA,KACI,kCAAA,CAEJ,cACI,YAAA,CACA,+BAAA,CACA,kBAAA,CACA,kBAAA,CAEJ,eACI,YAAA,CAKI,gBACI,kBAAA,CAEZ,aACI,kBAAA",sourcesContent:["@import url('https://fonts.googleapis.com/css2?family=Quicksand:wght@400;700&display=swap')\r\n    \r\nbody\r\n    font-family: 'Quicksand', sans-serif\r\n        \r\n.form-wrapper\r\n    padding: 20px\r\n    border: 1px solid rgba(0,0,0,.1)\r\n    border-radius: 10px\r\n    margin-bottom: 40px\r\n    \r\n.modal-wrapper\r\n    display: none\r\n\r\n.table\r\n\r\n    thead\r\n        th\r\n            white-space: nowrap\r\n\r\n.text-nowrap\r\n    white-space: nowrap"],sourceRoot:""}]);const l=s},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=e(t);return t[2]?"@media ".concat(t[2]," {").concat(n,"}"):n})).join("")},t.i=function(e,n,a){"string"==typeof e&&(e=[[null,e,""]]);var r={};if(a)for(var o=0;o<this.length;o++){var s=this[o][0];null!=s&&(r[s]=!0)}for(var l=0;l<e.length;l++){var i=[].concat(e[l]);a&&r[i[0]]||(n&&(i[2]?i[2]="".concat(n," and ").concat(i[2]):i[2]=n),t.push(i))}},t}},15:e=>{function t(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,a=new Array(t);n<t;n++)a[n]=e[n];return a}e.exports=function(e){var n,a,r=(a=4,function(e){if(Array.isArray(e))return e}(n=e)||function(e,t){var n=e&&("undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"]);if(null!=n){var a,r,o=[],s=!0,l=!1;try{for(n=n.call(e);!(s=(a=n.next()).done)&&(o.push(a.value),!t||o.length!==t);s=!0);}catch(e){l=!0,r=e}finally{try{s||null==n.return||n.return()}finally{if(l)throw r}}return o}}(n,a)||function(e,n){if(e){if("string"==typeof e)return t(e,n);var a=Object.prototype.toString.call(e).slice(8,-1);return"Object"===a&&e.constructor&&(a=e.constructor.name),"Map"===a||"Set"===a?Array.from(e):"Arguments"===a||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(a)?t(e,n):void 0}}(n,a)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),o=r[1],s=r[3];if("function"==typeof btoa){var l=btoa(unescape(encodeURIComponent(JSON.stringify(s)))),i="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(l),d="/*# ".concat(i," */"),c=s.sources.map((function(e){return"/*# sourceURL=".concat(s.sourceRoot||"").concat(e," */")}));return[o].concat(c).concat([d]).join("\n")}return[o].join("\n")}},14:(e,t,n)=>{n.r(t),n.d(t,{default:()=>p});var a=n(379),r=n.n(a),o=n(795),s=n.n(o),l=n(695),i=n.n(l),d=n(216),c=n.n(d),u=n(64),m={styleTagTransform:function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}},setAttributes:function(e){var t=n.nc;t&&e.setAttribute("nonce",t)},insert:function(e){var t=i()("head");if(!t)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");t.appendChild(e)}};m.domAPI=s(),m.insertStyleElement=c(),r()(u.Z,m);const p=u.Z&&u.Z.locals?u.Z.locals:void 0},695:e=>{var t={};e.exports=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}},379:e=>{var t=[];function n(e){for(var n=-1,a=0;a<t.length;a++)if(t[a].identifier===e){n=a;break}return n}function a(e,a){for(var o={},s=[],l=0;l<e.length;l++){var i=e[l],d=a.base?i[0]+a.base:i[0],c=o[d]||0,u="".concat(d," ").concat(c);o[d]=c+1;var m=n(u),p={css:i[1],media:i[2],sourceMap:i[3]};-1!==m?(t[m].references++,t[m].updater(p)):t.push({identifier:u,updater:r(p,a),references:1}),s.push(u)}return s}function r(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;n.update(e=t)}else n.remove()}}e.exports=function(e,r){var o=a(e=e||[],r=r||{});return function(e){e=e||[];for(var s=0;s<o.length;s++){var l=n(o[s]);t[l].references--}for(var i=a(e,r),d=0;d<o.length;d++){var c=n(o[d]);0===t[c].references&&(t[c].updater(),t.splice(c,1))}o=i}}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t),t}},795:e=>{e.exports=function(e){var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var a=n.css,r=n.media,o=n.sourceMap;r?e.setAttribute("media",r):e.removeAttribute("media"),o&&"undefined"!=typeof btoa&&(a+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),t.styleTagTransform(a,e)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},686:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0});t.default=function(){var e=this;this.list=[],this.addEmployee=function(t){e.list.push(t)},this.removeEmployee=function(t){e.list.splice(t,1)},this.lengthEmployee=function(){return e.list.length}}},317:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0});t.default=function(e,t,n,a,r,o){var s=this;this.getId=function(){return s.id},this.id=e,this.name=t,this.sex=n,this.year=a,this.position=r,this.salary=o}},607:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var r=a(n(686)),o=a(n(317));n(14);var s,l,i=new r.default;!function(e){e[e.male=0]="male",e[e.female=1]="female"}(s||(s={})),function(e){e[e["Nhân viên"]=1]="Nhân viên",e[e["Quản lý"]=2]="Quản lý",e[e["Giám đốc"]=3]="Giám đốc"}(l||(l={}));var d=function(){var e=parseInt(this.getAttribute("data-id")),t=i.list.map((function(e){return e.getId()})).indexOf(e);if(t>-1){var n=i.list[t],a=p(n),r=document.getElementById("modal-wrapper");r.innerHTML=a,r.style.display="block";var o=document.getElementsByClassName("js-close-modal");if(o.length)for(var s=0;s<o.length;s++)o[s].addEventListener("click",(function(){f(r)}));var d=document.getElementsByClassName("js-update-emp");if(d.length)for(s=0;s<d.length;s++)d[s].addEventListener("click",(function(){var e=i.list[t],n=!0,a="";try{var o=m(e.name,"edit-name");o.flag?e.name=o.value:a+=o.messenger;var s=m(e.sex,"edit-sex");s.flag?e.sex=s.value:a+=s.messenger;var d=m(e.year,"edit-year");d.flag?e.year=d.value:a+=d.messenger;var c=m(e.position,"edit-position");c.flag?e.position=l[c.value]:a+=c.messenger;var p=m(e.salary,"edit-salary");p.flag?e.salary=p.value:a+=p.messenger,n=o.flag&&d.flag&&c.flag&&p.flag}catch(e){n=!1,console.log(e)}n&&""!==e.name&&0!==e.year&&0!==e.salary?(i.list[t]=e,console.log(i.list[t]),u(i),f(r)):alert("Có gì đó sai sai !! \n"+a)}))}},c=function(){var e=parseInt(this.getAttribute("data-id"));if(confirm("Bạn có chắc là muốn xóa Employee #"+e)){var t=i.list.map((function(e){return e.getId()})).indexOf(e);t>-1&&(i.removeEmployee(t),this.closest("tr").remove()),0===i.list.length&&(document.getElementById("employee_list").innerHTML='\n                <tr id="data-empty">\n                    <td colspan="7" class="border-0 py-4 px-0">\n                        <div class="form-wrapper mb-0 text-center">\n                            <p class="mb-0">\n                                Không có dữ liệu để hiển thị\n                            </p>\n                        </div>\n                    </td>\n                </tr>\n            ')}},u=function(e){var t=document.getElementById("employee_list"),n="";if(e.list.length>0)for(var a=0,r=e.list;a<r.length;a++){var o=r[a];n+='\n                <tr id="tr-'+o.getId()+'" data-id="'+o.getId()+'">\n                    <td class="text-nowrap">'+o.getId()+'</td>\n                    <td class="text-nowrap">'+o.name+'</td>\n                    <td class="text-nowrap">'+(o.sex?"Nữ":"Nam")+'</td>\n                    <td class="text-nowrap">'+o.year+'</td>\n                    <td class="text-nowrap">'+o.position+'</td>\n                    <td class="text-nowrap">'+o.salary+' VNĐ</td>\n                    <td class="text-right text-nowrap">\n                        <a href="#" class="text-warning js-edit-emp" data-id="'+o.getId()+'" id="edit-emp-'+o.getId()+'">Sửa</a>\n                        <span class="px-2"> | </span>\n                        <a href="#" class="text-danger js-delete-emp" data-id="'+o.getId()+'" id="del-emp-'+o.getId()+'">Xóa</a>\n                    </td>\n                </tr>\n            '}else n+='\n            <tr id="data-empty">\n                <td colspan="7" class="border-0 py-4 px-0">\n                    <div class="form-wrapper mb-0 text-center">\n                        <p class="mb-0">\n                            Không có dữ liệu để hiển thị\n                        </p>\n                    </div>\n                </td>\n            </tr>\n        ';t.innerHTML=n;for(var s=document.getElementsByClassName("js-delete-emp"),l=document.getElementsByClassName("js-edit-emp"),i=0;i<s.length;i++)s[i].addEventListener("click",c);for(i=0;i<l.length;i++)l[i].addEventListener("click",d)},m=function(e,t){var n,a,r,o={value:null,messenger:"",flag:!0},s=document.getElementById(t).getAttribute("data-name")?document.getElementById(t).getAttribute("data-name"):t;return""===document.getElementById(t).value?(o.flag=!1,o.messenger+="Bạn chưa nhập "+s.toUpperCase()+"\n",null===(n=document.getElementById(t))||void 0===n||n.classList.add("is-invalid"),o):("number"==typeof e?isNaN(+document.getElementById(t).value)?(o.flag=!1,o.messenger+=s.toUpperCase()+" phải là 1 số\n",null===(r=document.getElementById(t))||void 0===r||r.classList.add("is-invalid")):(o.value=+document.getElementById(t).value,null===(a=document.getElementById(t))||void 0===a||a.classList.remove("is-invalid")):o.value=document.getElementById(t).value,o)},p=function(e){return'\n    <div class="modal fade show" style="display: block;" id="myModal" tabindex="-1">\n        <div class="modal-dialog modal-lg modal-dialog-centered">\n            <div class="modal-content">\n                <div class="modal-header">\n                    <h5 class="modal-title">Employee #'+e.getId()+" - "+e.name+'</h5>\n                    <button type="button" class="btn-close js-close-modal" data-bs-dismiss="modal" aria-label="Close"></button>\n                </div>\n                <div class="modal-body">\n                    <form id="editEmp">\n                        <div class="form-group row mb-4">\n                            <label class="col-sm-2 col-form-label">Họ Tên</label>\n                            <div class="col-sm-10">\n                                <input type="text" class="form-control" id="edit-name" data-name="Họ Tên" placeholder="Nhập tên nhân viên" value="'+e.name+'"  />\n                            </div>\n                        </div>\n                        <div class="form-group row mb-4">\n                            <label class="col-sm-2 col-form-label">Phái</label>\n                            <div class="col-sm-10">\n                                <select class="form-select" id="edit-sex" data-name="Phái">\n                                    <option value="0" '+(e.sex?"":"selected")+'>Nam</option>\n                                    <option value="1" '+(e.sex?"selected":"")+'>Nữ</option>\n                                </select>\n                            </div>\n                        </div>\n                        <div class="form-group row mb-4">\n                            <label class="col-sm-2 col-form-label">Năm Sinh</label>\n                            <div class="col-sm-10">\n                                <input type="text" class="form-control" id="edit-year" data-name="năm sinh" placeholder="Nhập năm sinh" value="'+e.year+'"  />\n                            </div>\n                        </div>\n                        <div class="form-group row mb-4">\n                            <label class="col-sm-2 col-form-label">Vị Trí</label>\n                            <div class="col-sm-10">\n                                <select class="form-select" id="edit-position" data-name="Vị trí">\n                                    <option value="1">Nhân viên</option>\n                                    <option value="2">Quản lý</option>\n                                    <option value="3">Giám đốc</option>\n                                </select>\n                            </div>\n                        </div>\n                        <div class="form-group row mb-4">\n                            <label class="col-sm-2 col-form-label">Lương cơ bản</label>\n                            <div class="col-sm-10">\n                                <div class="input-group">\n                                    <input type="text" class="form-control" id="edit-salary" data-name="Lương cơ bản" placeholder="Nhập lương cơ bản" value="'+e.salary+'"  />\n                                    <span class="input-group-text">VNĐ</span>\n                                </div>\n                            </div>\n                        </div>\n                    </form>\n                </div>\n                <div class="modal-footer">\n                    <button type="button" class="btn btn-secondary js-close-modal" data-bs-dismiss="modal">Hủy</button>\n                    <button type="button" class="btn btn-primary js-update-emp">Lưu</button>\n                </div>\n            </div>\n        </div>\n    </div>\n    <div class="modal-backdrop fade show js-close-modal"></div>\n    '},f=function(e){var t=document.getElementById("myModal");null==t||t.remove(),e.style.display="none"};window.onload=function(){var e=document.getElementById("add");e&&e.addEventListener("click",(function(){!function(){var e,t,n=!0,a="",r="",d=s.male,c=0,p=1,f=0;e=(t=i.list).length?t[t.length-1].getId()+1:1;try{var v=m(r,"name");v.flag?r=v.value:a+=v.messenger;var g=m(d,"sex");g.flag?d=g.value:a+=g.messenger;var y=m(c,"year");y.flag?c=y.value:a+=y.messenger;var h=m(p,"position");h.flag?p=h.value:a+=h.messenger;var b=m(f,"salary");b.flag?f=b.value:a+=b.messenger,n=v.flag&&y.flag&&h.flag&&b.flag}catch(e){n=!1,console.log(e)}if(n&&0!==e&&""!==r&&0!==c&&0!==f){var A=new o.default(e,r,d,c,l[p],f);i.addEmployee(A),u(i),function(){var e;try{for(var t=0,n=["name","year","salary"];t<n.length;t++){var a=n[t];null===(e=document.getElementById(a))||void 0===e||e.classList.remove("is-invalid"),document.getElementById(a).value=""}}catch(e){console.log(e)}}()}else alert("Có gì đó sai sai !! \n"+a)}()}))}}},t={};function n(a){var r=t[a];if(void 0!==r)return r.exports;var o=t[a]={id:a,exports:{}};return e[a].call(o.exports,o,o.exports,n),o.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var a in t)n.o(t,a)&&!n.o(e,a)&&Object.defineProperty(e,a,{enumerable:!0,get:t[a]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n(607)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,